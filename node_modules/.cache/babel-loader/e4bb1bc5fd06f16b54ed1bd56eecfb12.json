{"ast":null,"code":"import MVT from 'ol/format/MVT';\nimport VectorTileLayer from 'ol/layer/VectorTile';\nimport VectorTileSource from 'ol/source/VectorTile';\nconst NSI_VTL_INITALIZE_START = 'NSI_VTL_INITALIZE_START';\nconst NSI_VTL_INITALIZE_END = 'NSI_VTL_INITALIZE_END';\nconst MAP_INITIALIZED = 'MAP_INITIALIZED';\nexport default {\n  name: 'vtl',\n  getReducer: () => {\n    const initialData = {\n      _shouldInitialize: false\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case NSI_VTL_INITALIZE_START:\n        case NSI_VTL_INITALIZE_END:\n          return Object.assign({}, state, payload);\n\n        case MAP_INITIALIZED:\n          return Object.assign({}, state, {\n            _shouldInitialize: true\n          });\n\n        default:\n          return state;\n      }\n    };\n  },\n  doNsiVTLInitialize: () => ({\n    dispatch,\n    store,\n    anonGet\n  }) => {\n    dispatch({\n      type: NSI_VTL_INITALIZE_START,\n      payload: {\n        _shouldInitialize: false\n      }\n    });\n    initMap(store);\n  },\n  reactNsiVTLShouldInitialize: state => {\n    if (state.vtl._shouldInitialize) return {\n      actionCreator: \"doNsiVTLInitialize\"\n    };\n  }\n};\nconst nsiLayers = {\n  'NSIP1': 'http://localhost:8086/',\n  'NSIP2': 'http://localhost:8086/'\n};\n\nconst initMap = function (store) {\n  const map = store.selectMap();\n  let layer = new VectorTileLayer({\n    source: new VectorTileSource({\n      attributions: 'USACE',\n      format: new MVT(),\n      url: \"http://localhost:8086/tiles/{z}/{x}/{y}.pbf\"\n    })\n  });\n  const parentUid = store.selectTreeViewRootId();\n  store.doAddLayer({\n    displayName: 'National Structure Inventory Vector Tile Layer',\n    parentUid: parentUid,\n    type: \"notfolder\",\n    mapLayer: layer,\n    visible: true,\n    zoomTo: false\n  });\n};","map":{"version":3,"sources":["C:/Examples/nsi_survey_tool/nsi_survey_tool/src/cm-plugins/vtl/cm3-nsi-vtl-bundle.js"],"names":["MVT","VectorTileLayer","VectorTileSource","NSI_VTL_INITALIZE_START","NSI_VTL_INITALIZE_END","MAP_INITIALIZED","name","getReducer","initialData","_shouldInitialize","state","type","payload","Object","assign","doNsiVTLInitialize","dispatch","store","anonGet","initMap","reactNsiVTLShouldInitialize","vtl","actionCreator","nsiLayers","map","selectMap","layer","source","attributions","format","url","parentUid","selectTreeViewRootId","doAddLayer","displayName","mapLayer","visible","zoomTo"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,eAAhB;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AAEA,MAAMC,uBAAuB,GAAC,yBAA9B;AACA,MAAMC,qBAAqB,GAAC,uBAA5B;AACA,MAAMC,eAAe,GAAC,iBAAtB;AAEA,eAAc;AACVC,EAAAA,IAAI,EAAC,KADK;AAEVC,EAAAA,UAAU,EAAE,MAAM;AAChB,UAAMC,WAAW,GAAG;AAClBC,MAAAA,iBAAiB,EAAE;AADD,KAApB;AAGA,WAAO,CAACC,KAAK,GAAGF,WAAT,EAAsB;AAAEG,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAtB,KAA4C;AACjD,cAAOD,IAAP;AACE,aAAKR,uBAAL;AACA,aAAKC,qBAAL;AACE,iBAAOS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyBE,OAAzB,CAAP;;AACF,aAAKP,eAAL;AACE,iBAAOQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BD,YAAAA,iBAAiB,EAAE;AADW,WAAzB,CAAP;;AAGF;AACE,iBAAOC,KAAP;AATJ;AAWD,KAZD;AAaD,GAnBS;AAoBVK,EAAAA,kBAAkB,EAAE,MAAM,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,GAAD,KAAkC;AAC1DF,IAAAA,QAAQ,CAAC;AACPL,MAAAA,IAAI,EAAER,uBADC;AAEPS,MAAAA,OAAO,EAAE;AACPH,QAAAA,iBAAiB,EAAE;AADZ;AAFF,KAAD,CAAR;AAMAU,IAAAA,OAAO,CAACF,KAAD,CAAP;AACD,GA5BS;AA6BVG,EAAAA,2BAA2B,EAAGV,KAAD,IAAW;AACtC,QAAGA,KAAK,CAACW,GAAN,CAAUZ,iBAAb,EAAgC,OAAO;AAAEa,MAAAA,aAAa,EAAE;AAAjB,KAAP;AACjC;AA/BS,CAAd;AAiCE,MAAMC,SAAS,GAAC;AACd,WAAQ,wBADM;AAEd,WAAQ;AAFM,CAAhB;;AAIF,MAAMJ,OAAO,GAAC,UAASF,KAAT,EAAe;AAC3B,QAAMO,GAAG,GAAGP,KAAK,CAACQ,SAAN,EAAZ;AACA,MAAIC,KAAK,GAAC,IAAIzB,eAAJ,CAAoB;AAC5B0B,IAAAA,MAAM,EAAE,IAAIzB,gBAAJ,CAAqB;AAC3B0B,MAAAA,YAAY,EAAE,OADa;AAE3BC,MAAAA,MAAM,EAAE,IAAI7B,GAAJ,EAFmB;AAG3B8B,MAAAA,GAAG,EAAC;AAHuB,KAArB;AADoB,GAApB,CAAV;AAOA,QAAMC,SAAS,GAAGd,KAAK,CAACe,oBAAN,EAAlB;AACAf,EAAAA,KAAK,CAACgB,UAAN,CAAiB;AACfC,IAAAA,WAAW,EAAE,gDADE;AAEfH,IAAAA,SAAS,EAAEA,SAFI;AAGfpB,IAAAA,IAAI,EAAC,WAHU;AAIfwB,IAAAA,QAAQ,EAAET,KAJK;AAKfU,IAAAA,OAAO,EAAE,IALM;AAMfC,IAAAA,MAAM,EAAE;AANO,GAAjB;AAQD,CAlBD","sourcesContent":["import MVT from 'ol/format/MVT';\r\nimport VectorTileLayer from 'ol/layer/VectorTile';\r\nimport VectorTileSource from 'ol/source/VectorTile';\r\n\r\nconst NSI_VTL_INITALIZE_START='NSI_VTL_INITALIZE_START';\r\nconst NSI_VTL_INITALIZE_END='NSI_VTL_INITALIZE_END';\r\nconst MAP_INITIALIZED='MAP_INITIALIZED';\r\n\r\nexport default{\r\n    name:'vtl',\r\n    getReducer: () => {\r\n      const initialData = {\r\n        _shouldInitialize: false,\r\n      };\r\n      return (state = initialData, { type, payload }) => {\r\n        switch(type){\r\n          case NSI_VTL_INITALIZE_START:\r\n          case NSI_VTL_INITALIZE_END:\r\n            return Object.assign({}, state, payload);\r\n          case MAP_INITIALIZED:\r\n            return Object.assign({}, state, {\r\n              _shouldInitialize: true\r\n            })\r\n          default:\r\n            return state;\r\n        }\r\n      }\r\n    },\r\n    doNsiVTLInitialize: () => ({ dispatch, store, anonGet }) => {\r\n      dispatch({\r\n        type: NSI_VTL_INITALIZE_START,\r\n        payload: {\r\n          _shouldInitialize: false,\r\n        }\r\n      })\r\n      initMap(store);      \r\n    },\r\n    reactNsiVTLShouldInitialize: (state) => {\r\n      if(state.vtl._shouldInitialize) return { actionCreator: \"doNsiVTLInitialize\" };\r\n    }\r\n  };\r\n  const nsiLayers={\r\n    'NSIP1':'http://localhost:8086/',\r\n    'NSIP2':'http://localhost:8086/',\r\n  }\r\nconst initMap=function(store){\r\n  const map = store.selectMap();\r\n  let layer=new VectorTileLayer({\r\n    source: new VectorTileSource({\r\n      attributions: 'USACE',\r\n      format: new MVT(),\r\n      url:\"http://localhost:8086/tiles/{z}/{x}/{y}.pbf\",\r\n    })\r\n  })\r\n  const parentUid = store.selectTreeViewRootId();\r\n  store.doAddLayer({\r\n    displayName: 'National Structure Inventory Vector Tile Layer',\r\n    parentUid: parentUid,\r\n    type:\"notfolder\",\r\n    mapLayer: layer,\r\n    visible: true,\r\n    zoomTo: false,\r\n  })\r\n};"]},"metadata":{},"sourceType":"module"}