{"ast":null,"code":"import Style from 'ol/style/Style';\nimport Stroke from 'ol/style/Stroke';\nimport Fill from 'ol/style/Fill';\nimport Text from 'ol/style/Text';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport v4 from \"uuid\";\nconst NSI_INITALIZE_START = 'NSI_INITALIZE_START';\nconst NSI_INITALIZE_END = 'NSI_INITALIZE_END';\nconst MAP_INITIALIZED = 'MAP_INITIALIZED';\nconst apiHost = process.env.REACT_APP_APIHOST_NSI;\nexport default {\n  name: 'nsi',\n  getReducer: () => {\n    const initialData = {\n      _shouldInitialize: false\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case NSI_INITALIZE_START:\n        case NSI_INITALIZE_END:\n          return Object.assign({}, state, payload);\n\n        case MAP_INITIALIZED:\n          return Object.assign({}, state, {\n            _shouldInitialize: true\n          });\n\n        default:\n          return state;\n      }\n    };\n  },\n  doNsiInitialize: () => ({\n    dispatch,\n    store,\n    anonGet\n  }) => {\n    dispatch({\n      type: NSI_INITALIZE_START,\n      payload: {\n        _shouldInitialize: false\n      }\n    });\n    initMap(store);\n  },\n  reactNsiShouldInitialize: state => {\n    if (state.nsi._shouldInitialize) return {\n      actionCreator: \"doNsiInitialize\"\n    };\n  }\n};\n\nconst initMap = function (store) {\n  let vectorSource = new VectorSource({\n    format: new GeoJSON({\n      featureProjection: \"EPSG:3857\"\n    }),\n    loader: function (extent, resolution, projection) {\n      var url = `${apiHost}?fips=15005`; //hawaii\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url);\n\n      xhr.onload = function () {\n        if (xhr.status === 200) {\n          let format = vectorSource.getFormat();\n          let resp = `{\"type\": \"FeatureCollection\",\"name\": \"NSI\",\"crs\": { \"type\": \"name\", \"properties\": { \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" } },\"features\":${xhr.responseText}}`;\n          let features = format.readFeatures(resp);\n          vectorSource.addFeatures(features);\n        } else {\n          console.log(\"ERROR LOADING VECTOR SOURCE\");\n        }\n      };\n\n      xhr.send();\n    }\n  });\n  var vectorLayer1 = new VectorLayer({\n    source: vectorSource,\n    style: function (feature) {\n      let s = new Style({\n        stroke: new Stroke({\n          color: '#CCC',\n          width: 3.0\n        }),\n        fill: new Fill({\n          color: 'rgba(0,0,255,0.0)'\n        }),\n        text: new Text({\n          font: '11px \"Open Sans\", \"Arial Unicode MS\", \"sans-serif\"',\n          overflow: false,\n          stroke: new Stroke({\n            color: \"#FFF\",\n            width: 2\n          }),\n          fill: new Fill({\n            color: 'blue'\n          })\n        })\n      });\n      s.getText().setText(feature.get('occtype'));\n      return s;\n    }\n  });\n  const parentUid = store.selectTreeViewRootId();\n  const uid = v4();\n  store.doAddLayer({\n    displayName: 'National Structure Inventory',\n    parentUid: parentUid,\n    type: \"notfolder\",\n    mapLayer: vectorLayer1,\n    visible: true,\n    zoomTo: false\n  });\n};","map":{"version":3,"sources":["C:/Examples/nsi_survey_tool/nsi_survey_tool/src/cm-plugins/nsi/cm3-nsi-bundle.js"],"names":["Style","Stroke","Fill","Text","VectorLayer","VectorSource","GeoJSON","v4","NSI_INITALIZE_START","NSI_INITALIZE_END","MAP_INITIALIZED","apiHost","process","env","REACT_APP_APIHOST_NSI","name","getReducer","initialData","_shouldInitialize","state","type","payload","Object","assign","doNsiInitialize","dispatch","store","anonGet","initMap","reactNsiShouldInitialize","nsi","actionCreator","vectorSource","format","featureProjection","loader","extent","resolution","projection","url","xhr","XMLHttpRequest","open","onload","status","getFormat","resp","responseText","features","readFeatures","addFeatures","console","log","send","vectorLayer1","source","style","feature","s","stroke","color","width","fill","text","font","overflow","getText","setText","get","parentUid","selectTreeViewRootId","uid","doAddLayer","displayName","mapLayer","visible","zoomTo"],"mappings":"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","sourcesContent":["import Style from 'ol/style/Style';\r\nimport Stroke from 'ol/style/Stroke';\r\nimport Fill from 'ol/style/Fill';\r\nimport Text from 'ol/style/Text';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\n\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport v4 from \"uuid\";\r\nconst NSI_INITALIZE_START='NSI_INITALIZE_START';\r\nconst NSI_INITALIZE_END='NSI_INITALIZE_END';\r\nconst MAP_INITIALIZED='MAP_INITIALIZED';\r\n\r\nconst apiHost=process.env.REACT_APP_APIHOST_NSI\r\n\r\nexport default{\r\n    name:'nsi',\r\n    getReducer: () => {\r\n      const initialData = {\r\n        _shouldInitialize: false,\r\n      };\r\n      return (state = initialData, { type, payload }) => {\r\n        switch(type){\r\n          case NSI_INITALIZE_START:\r\n          case NSI_INITALIZE_END:\r\n            return Object.assign({}, state, payload);\r\n          case MAP_INITIALIZED:\r\n            return Object.assign({}, state, {\r\n              _shouldInitialize: true\r\n            })\r\n          default:\r\n            return state;\r\n        }\r\n      }\r\n    },\r\n    doNsiInitialize: () => ({ dispatch, store, anonGet }) => {\r\n      dispatch({\r\n        type: NSI_INITALIZE_START,\r\n        payload: {\r\n          _shouldInitialize: false,\r\n        }\r\n      })\r\n      initMap(store);      \r\n    },\r\n    reactNsiShouldInitialize: (state) => {\r\n      if(state.nsi._shouldInitialize) return { actionCreator: \"doNsiInitialize\" };\r\n    }\r\n  };\r\n\r\nconst initMap=function(store){\r\n  let vectorSource=new VectorSource({\r\n    format: new GeoJSON({featureProjection:\"EPSG:3857\"}),\r\n    loader:function(extent, resolution, projection) {\r\n      var url = `${apiHost}?fips=15005`;//hawaii\r\n      var xhr = new XMLHttpRequest();\r\n      xhr.open('GET', url);\r\n      xhr.onload = function() {\r\n        if (xhr.status === 200) {\r\n          let format=vectorSource.getFormat();\r\n          let resp = `{\"type\": \"FeatureCollection\",\"name\": \"NSI\",\"crs\": { \"type\": \"name\", \"properties\": { \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" } },\"features\":${xhr.responseText}}`\r\n          let features = format.readFeatures(resp)\r\n          vectorSource.addFeatures(features);\r\n        } else {\r\n          console.log(\"ERROR LOADING VECTOR SOURCE\")\r\n        }\r\n      }\r\n      xhr.send();\r\n    }\r\n  });\r\n\r\n  var vectorLayer1 = new VectorLayer({\r\n      source:vectorSource,\r\n      style:function(feature){\r\n        let s = new Style({\r\n          stroke: new Stroke({\r\n            color: '#CCC',\r\n            width: 3.0\r\n          }),\r\n          fill:new Fill({\r\n            color: 'rgba(0,0,255,0.0)'\r\n          }),\r\n          text: new Text({\r\n            font: '11px \"Open Sans\", \"Arial Unicode MS\", \"sans-serif\"',\r\n            overflow:false,\r\n            stroke: new Stroke({color:\"#FFF\", width:2}),\r\n            fill: new Fill({\r\n              color: 'blue'\r\n            })\r\n          })\r\n        })\r\n        s.getText().setText(feature.get('occtype'));\r\n        return s;\r\n      } \r\n  });\r\n  const parentUid = store.selectTreeViewRootId();\r\n  const uid = v4();\r\n  store.doAddLayer({\r\n    displayName: 'National Structure Inventory',\r\n    parentUid: parentUid,\r\n    type:\"notfolder\",\r\n    mapLayer: vectorLayer1,\r\n    visible: true,\r\n    zoomTo: false,\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}