{"version":3,"sources":["webpack:///./src/MapboxVectorLayer.js","webpack:///./examples/mapbox-layer.js"],"names":["getMapboxPath","url","indexOf","slice","length","options","const","superOptions","Object","assign","declutter","styleURL","source","layers","accessToken","state","LOADING","format","MVT","super","this","sourceId","fetchStyle","token","mapboxPath","Error","mapboxBaseURL","normalizeStyleURL","fetch","then","response","ok","json","style","onStyleLoad","catch","error","handleError","sourceIdOrLayersList","firstSource","lookup","i","layer","id","let","candidate","keys","sources","sprite","normalizeSpriteURL","styleSource","type","getSource","setUrl","setState","READY","console","ERROR","VectorTile","key","document","cookie","replace","window","prompt","Map","target","view","View","center","zoom"],"mappings":"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","file":"mapbox-layer.js","sourcesContent":["import {applyStyle} from './index';\nimport MVT from 'ol/format/MVT';\nimport SourceState from 'ol/source/State';\nimport VectorTileLayer from 'ol/layer/VectorTile';\nimport VectorTileSource from 'ol/source/VectorTile';\n\nconst mapboxBaseURL = 'https://api.mapbox.com';\n\nfunction getMapboxPath(url) {\n  const startsWith = 'mapbox://';\n  if (url.indexOf(startsWith) !== 0) {\n    return '';\n  }\n  return url.slice(startsWith.length);\n}\n\nfunction normalizeSpriteURL(url, token) {\n  const mapboxPath = getMapboxPath(url);\n  if (!mapboxPath) {\n    return url;\n  }\n  const startsWith = 'sprites/';\n  if (mapboxPath.indexOf(startsWith) !== 0) {\n    throw new Error(`unexpected sprites url: ${url}`);\n  }\n  const sprite = mapboxPath.slice(startsWith.length);\n\n  return `${mapboxBaseURL}/styles/v1/${sprite}/sprite?access_token=${token}`;\n}\n\nfunction normalizeStyleURL(url, token) {\n  const mapboxPath = getMapboxPath(url);\n  if (!mapboxPath) {\n    return url;\n  }\n  const startsWith = 'styles/';\n  if (mapboxPath.indexOf(startsWith) !== 0) {\n    throw new Error(`unexpected style url: ${url}`);\n  }\n  const style = mapboxPath.slice(startsWith.length);\n\n  return `${mapboxBaseURL}/styles/v1/${style}?&access_token=${token}`;\n}\n\nfunction normalizeSourceURL(url, token) {\n  const mapboxPath = getMapboxPath(url);\n  if (!mapboxPath) {\n    return url;\n  }\n  return `https://{a-d}.tiles.mapbox.com/v4/${mapboxPath}/{z}/{x}/{y}.vector.pbf?access_token=${token}`;\n}\n\nexport default class MapboxVectorLayer extends VectorTileLayer {\n  constructor(options) {\n    const superOptions = Object.assign({\n      declutter: true\n    }, options);\n\n    delete superOptions.styleURL;\n    delete superOptions.source;\n    delete superOptions.layers;\n    delete superOptions.accessToken;\n\n    superOptions.source = new VectorTileSource({\n      state: SourceState.LOADING,\n      format: new MVT()\n    });\n\n    super(superOptions);\n\n    this.sourceId = options.source;\n    this.layers = options.layers;\n    this.accessToken = options.accessToken;\n    this.fetchStyle(options.styleURL);\n  }\n\n  fetchStyle(styleURL) {\n    const url = normalizeStyleURL(styleURL, this.accessToken);\n    fetch(url).then(response => {\n      if (!response.ok) {\n        throw new Error(`unexpected response when fetching style: ${response.status}`);\n      }\n      return response.json();\n    }).then(style => {\n      this.onStyleLoad(style);\n    }).catch(error => {\n      this.handleError(error);\n    });\n  }\n\n  onStyleLoad(style) {\n    let sourceId;\n    let sourceIdOrLayersList;\n    if (this.layers) {\n      // confirm all layers share the same source\n      const lookup = {};\n      for (let i = 0; i < style.layers.length; ++i) {\n        const layer = style.layers[i];\n        if (layer.source) {\n          lookup[layer.id] = layer.source;\n        }\n      }\n      let firstSource;\n      for (let i = 0; i < this.layers.length; ++i) {\n        const candidate = lookup[this.layers[i]];\n        if (!candidate) {\n          this.handleError(new Error(`could not find source for ${this.layers[i]}`));\n          return;\n        }\n        if (!firstSource) {\n          firstSource = candidate;\n        } else if (firstSource !== candidate) {\n          this.handleError(new Error(`layers can only use a single source, found ${firstSource} and ${candidate}`));\n          return;\n        }\n      }\n      sourceId = firstSource;\n      sourceIdOrLayersList = this.layers;\n    } else {\n      sourceId = this.sourceId;\n      sourceIdOrLayersList = sourceId;\n    }\n\n    if (!sourceIdOrLayersList) {\n      // default to the first source in the style\n      sourceId = Object.keys(style.sources)[0];\n      sourceIdOrLayersList = sourceId;\n    }\n\n    if (style.sprite) {\n      style.sprite = normalizeSpriteURL(style.sprite, this.accessToken);\n    }\n\n    const styleSource = style.sources[sourceId];\n    if (styleSource.type !== 'vector') {\n      this.handleError(new Error(`only works for vector sources, found ${styleSource.type}`));\n      return;\n    }\n\n    const source = this.getSource();\n    source.setUrl(normalizeSourceURL(styleSource.url, this.accessToken));\n\n    applyStyle(this, style, sourceIdOrLayersList).then(() => {\n      source.setState(SourceState.READY);\n    }).catch(error => {\n      this.handleError(error);\n    });\n  }\n\n  handleError(error) {\n    // TODO: make this error accessible to an error listener\n    console.error(error); // eslint-disable-line\n    const source = this.getSource();\n    source.setState(SourceState.ERROR);\n  }\n}\n","import 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport MapboxVectorLayer from 'ol-mapbox-style/dist/MapboxVectorLayer';\n\n\nlet key = document.cookie.replace(/(?:(?:^|.*;\\s*)mapbox_access_token\\s*\\=\\s*([^;]*).*$)|^.*$/, '$1');\nif (!key) {\n  key = window.prompt('Enter your Mapbox API access token:');\n  document.cookie = 'mapbox_access_token=' + key + '; expires=Fri, 31 Dec 9999 23:59:59 GMT';\n}\n\nnew Map({\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  }),\n  layers: [\n    new MapboxVectorLayer({\n      accessToken: key,\n      styleURL: 'mapbox://styles/mapbox/bright-v9'\n    })\n  ]\n});\n"],"sourceRoot":""}